const { Telegraf } = require('telegraf');
const bot = new Telegraf('8280337762:AAGNvUSZYh1Ap2p_Xwp5r3yCX4stL7T4qT4'); 

bot.start((ctx) => {
  ctx.reply('üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Mini App –ø–æ –∑–∞–∫–∞–∑–∞–º –∏–∑ –ö–∏—Ç–∞—è!', {
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å Mini App', web_app: { url: 'https://china-miniapp-bot-cy9w.vercel.app' } }
        ],
        [
          { text: 'üì¶ –û –ø—Ä–æ–µ–∫—Ç–µ', callback_data: 'about' }
        ]
      ]
    }
  });
});

bot.action('about', (ctx) => {
  ctx.answerCbQuery();
  ctx.reply('üá®üá≥ –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, –∫–∞–∫ –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ –ö–∏—Ç–∞—è –±–µ–∑ –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–æ–≤.');
});

bot.on('callback_query', async (ctx) => {
  try {
    // –û—Ç–≤–µ—á–∞–µ–º Telegram, —á—Ç–æ–±—ã callback –Ω–µ –∏—Å—Ç–µ–∫
    await ctx.answerCbQuery();

    const data = ctx.callbackQuery.data;

    if (data === 'open_app') {
      await ctx.reply('–û—Ç–∫—Ä—ã–≤–∞—é –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...');
      await ctx.reply('üëá –ù–∞–∂–º–∏, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å:', {
        reply_markup: {
          inline_keyboard: [
            [{ text: '–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: 'https://china-miniapp-bot-cy9w.vercel.app' } }]
          ]
        }
      });
    }

  } catch (err) {
    console.log('‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π callback –∏–ª–∏ –æ—à–∏–±–∫–∞ Telegram:', err.description);
  }
});

bot.launch();
console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...');

